{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PSchowitz/ToyProjects/blob/main/PS1_SCHOWITZ_PHILIP.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DLPLOLuUM09t"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lFCoyUhbM3QW"
      },
      "outputs": [],
      "source": [
        "#Randomly generate target function\n",
        "\n",
        "t_1, t_2, b = np.random.uniform(-10,10),np.random.uniform(-10,10),np.random.uniform(-10,10)\n",
        "\n",
        "x = np.linspace(-10,10,10)\n",
        "y = (-t_1*x - b)/t_2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "885fGSvVPnst"
      },
      "outputs": [],
      "source": [
        "#Randomly generate 2-dimensional dataset\n",
        "\n",
        "D_xvals = [np.random.uniform(-10,10) for x in range(20)]\n",
        "D_yvals = [np.random.uniform(-10,10)for x in range(20)]\n",
        "D_labels = [np.sign(D_xvals[i]*t_1 + D_yvals[i]*t_2 + b) for i in range(20)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "VrVMbfATTTKK",
        "outputId": "4795b28a-3429-4077-da2e-74057684e825"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Plot target function (in green) and data points (blue dots are +1 and red crosses are -1)\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(1, 1, 1)\n",
        "ax.spines['left'].set_position('center')\n",
        "ax.spines['bottom'].set_position('zero')\n",
        "ax.spines['right'].set_color('none')\n",
        "ax.spines['top'].set_color('none')\n",
        "ax.xaxis.set_ticks_position('bottom')\n",
        "ax.yaxis.set_ticks_position('left')\n",
        "\n",
        "plt.plot(x,y, 'g')\n",
        "\n",
        "for i in range(20):\n",
        "  if D_labels[i] == 1:\n",
        "    color = \"bo\"\n",
        "  else:\n",
        "    color = \"r+\"\n",
        "  plt.plot(D_xvals[i], D_yvals[i], color)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4OoAnY70XQkj",
        "outputId": "2fa994b8-b874-4393-ad8e-dd63ba08cce2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Iterations to convergence: 3\n"
          ]
        }
      ],
      "source": [
        "#Implement PLA\n",
        "\n",
        "weights = np.zeros(3)\n",
        "\n",
        "proceed = 1\n",
        "iterations = 0\n",
        "\n",
        "while(proceed): \n",
        "  proceed = 0\n",
        "  iterations +=1 \n",
        "  for i in range(20):\n",
        "    input = np.array([1, D_xvals[i], D_yvals[i]])\n",
        "    #Perceptron equation \n",
        "    if np.sign(np.dot(weights,input)) != D_labels[i]:\n",
        "      weights += D_labels[i]*input\n",
        "      proceed = 1\n",
        "\n",
        "print(\"Iterations to converge:\",iterations)\n",
        "final_hypothesis = (-weights[1]*x -weights[0])/weights[2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "Esg9eaCue1gC",
        "outputId": "e92a6a5d-ddca-430d-b16a-68788f06517e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#Plot target function (green), data points (blue dots are +1 and red crosses are -1), and final hypothesis (red)\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(1, 1, 1)\n",
        "ax.spines['left'].set_position('center')\n",
        "ax.spines['bottom'].set_position('zero')\n",
        "ax.spines['right'].set_color('none')\n",
        "ax.spines['top'].set_color('none')\n",
        "ax.xaxis.set_ticks_position('bottom')\n",
        "ax.yaxis.set_ticks_position('left')\n",
        "\n",
        "plt.plot(x, y, 'g')\n",
        "\n",
        "plt.plot(x, final_hypothesis, 'r')\n",
        "\n",
        "for i in range(20):\n",
        "  if D_labels[i] == 1:\n",
        "    color = \"bo\"\n",
        "  else:\n",
        "    color = \"r+\"\n",
        "  plt.plot(D_xvals[i], D_yvals[i], color)\n",
        "\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "authorship_tag": "ABX9TyNE7MmZJbGFS7m5RCfgsRoO",
      "include_colab_link": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
